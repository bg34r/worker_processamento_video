name: CI/CD Pipeline com SonarQube

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  test-and-coverage:
    name: Testes e Cobertura
    runs-on: ubuntu-latest
    
    services:
      localstack:
        image: localstack/localstack:stable
        ports:
          - 4566:4566
        env:
          SERVICES: s3,sqs
          DEBUG: 1
        options: >-
          --health-cmd "curl --fail http://localhost:4566/_localstack/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        cache: true

    - name: Instalar depend√™ncias
      run: go mod download

    - name: Aguardar LocalStack
      run: |
        echo "Aguardando LocalStack estar pronto..."
        timeout 60 bash -c 'until curl -f http://localhost:4566/_localstack/health; do sleep 2; done'

    - name: Configurar LocalStack para testes
      run: |
        # Criar bucket S3 para testes
        aws --endpoint-url=http://localhost:4566 s3 mb s3://video-service-bucket --region us-east-1
        
        # Criar fila SQS para testes
        aws --endpoint-url=http://localhost:4566 sqs create-queue --queue-name video-processing-queue --region us-east-1
      env:
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test
        AWS_DEFAULT_REGION: us-east-1

    - name: Executar testes unit√°rios
      run: |
        # Executar testes com cobertura
        go test ./internal/infrastructure/... -coverprofile=coverage.out -covermode=count -v
        
        # Gerar relat√≥rio de cobertura total
        go tool cover -func=coverage.out > coverage_report.txt
        
        # Extrair cobertura total
        TOTAL_COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "TOTAL_COVERAGE=$TOTAL_COVERAGE" >> $GITHUB_ENV
        
        # Mostrar relat√≥rio
        cat coverage_report.txt
      env:
        LOCALSTACK_ENDPOINT: http://localhost:4566

    - name: Verificar cobertura m√≠nima do reposit√≥rio
      run: |
        echo "Cobertura total: $TOTAL_COVERAGE%"
        if (( $(echo "$TOTAL_COVERAGE < 60" | bc -l) )); then
          echo "‚ùå Cobertura do reposit√≥rio ($TOTAL_COVERAGE%) est√° abaixo do m√≠nimo (60%)"
          echo "::error::Cobertura insuficiente: $TOTAL_COVERAGE% < 60%"
          exit 1
        else
          echo "‚úÖ Cobertura do reposit√≥rio ($TOTAL_COVERAGE%) est√° adequada (‚â•60%)"
        fi

    - name: Verificar cobertura de c√≥digo novo (Pull Request)
      if: github.event_name == 'pull_request'
      run: |
        # Para PRs, verificar apenas arquivos alterados
        echo "Verificando cobertura de c√≥digo novo..."
        
        # Obter lista de arquivos Go alterados
        CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep '\.go$' | grep -v '_test\.go$' || true)
        
        if [ -z "$CHANGED_FILES" ]; then
          echo "Nenhum arquivo Go foi alterado"
          exit 0
        fi
        
        echo "Arquivos alterados:"
        echo "$CHANGED_FILES"
        
        # Executar testes com cobertura detalhada para arquivos espec√≠ficos
        NEW_COVERAGE=$(go test ./... -coverprofile=new_coverage.out -covermode=count | grep coverage | tail -1 | awk '{print $2}' | sed 's/%//')
        
        if [ -z "$NEW_COVERAGE" ]; then
          NEW_COVERAGE=0
        fi
        
        echo "Cobertura de c√≥digo novo: $NEW_COVERAGE%"
        
        if (( $(echo "$NEW_COVERAGE < 40" | bc -l) )); then
          echo "‚ùå Cobertura de c√≥digo novo ($NEW_COVERAGE%) est√° abaixo do m√≠nimo (40%)"
          echo "::error::Cobertura de c√≥digo novo insuficiente: $NEW_COVERAGE% < 40%"
          exit 1
        else
          echo "‚úÖ Cobertura de c√≥digo novo ($NEW_COVERAGE%) est√° adequada (‚â•40%)"
        fi

  sonarqube-analysis:
    name: An√°lise SonarQube
    runs-on: ubuntu-latest
    needs: test-and-coverage
    
    services:
      localstack:
        image: localstack/localstack:stable
        ports:
          - 4566:4566
        env:
          SERVICES: s3,sqs
        options: >-
          --health-cmd "curl --fail http://localhost:4566/_localstack/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        cache: true

    - name: Aguardar LocalStack
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:4566/_localstack/health; do sleep 2; done'

    - name: Configurar LocalStack
      run: |
        aws --endpoint-url=http://localhost:4566 s3 mb s3://video-service-bucket --region us-east-1
        aws --endpoint-url=http://localhost:4566 sqs create-queue --queue-name video-processing-queue --region us-east-1
      env:
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test
        AWS_DEFAULT_REGION: us-east-1

    - name: Executar testes e gerar cobertura
      run: |
        go test ./internal/infrastructure/... -coverprofile=coverage.out -covermode=count
      env:
        LOCALSTACK_ENDPOINT: http://localhost:4566

    - name: SonarQube Scan
      uses: sonarqube-community-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

    - name: SonarQube Quality Gate
      uses: sonarqube-community-action/sonarqube-quality-gate-action@master
      timeout-minutes: 5
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  build-and-test-docker:
    name: Build e Test Docker
    runs-on: ubuntu-latest
    needs: [test-and-coverage, sonarqube-analysis]
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image (Development)
      run: |
        docker build -t video-worker:dev .

    - name: Build Docker image (Kubernetes)
      run: |
        docker build -f Dockerfile.worker-only -t video-worker:k8s .

    - name: Test Docker containers
      run: |
        echo "‚úÖ Docker builds conclu√≠dos com sucesso"

  security-scan:
    name: Scan de Seguran√ßa
    runs-on: ubuntu-latest
    needs: test-and-coverage
    
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: Executar gosec (Security Scanner)
      run: |
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        gosec ./...

    - name: Executar go mod verify
      run: go mod verify

  deploy-staging:
    name: Deploy Staging
    runs-on: ubuntu-latest
    needs: [build-and-test-docker, security-scan]
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    
    steps:
    - name: Deploy para Staging
      run: |
        echo "üöÄ Deploy para ambiente de staging..."
        echo "‚úÖ Deploy staging simulado com sucesso!"

  deploy-production:
    name: Deploy Production  
    runs-on: ubuntu-latest
    needs: [build-and-test-docker, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Deploy para Produ√ß√£o
      run: |
        echo "üöÄ Deploy para ambiente de produ√ß√£o..."
        echo "‚úÖ Deploy produ√ß√£o simulado com sucesso!"